name: Jira-Github Integration and Notification

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
  issues:
    types:
      - opened
      - edited

jobs:
  create_jira_ticket_github_prs:
    runs-on: ubuntu-latest

    steps:
      - name: Use variables
        run: |
          echo "Event Name: $GITHUB_EVENT_NAME"
          echo "Event Action: $GITHUB_EVENT_ACTION"
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
          JIRA_API_TOKEN: ${{ vars.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ vars.JIRA_PROJECT_KEY }}
          JIRA_USERNAME: ${{ vars.JIRA_USERNAME }}
          JIRA_URL: ${{ vars.JIRA_URL }}

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Handle Events
        id: handle_events
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            EVENT_TYPE="pull_request"
            DESCRIPTION="${{ github.event.pull_request.body }}"
            SUMMARY="${{ github.event.pull_request.title }}"
          elif [ "${GITHUB_EVENT_NAME}" = "issues" ]; then
            EVENT_TYPE="issues"
            DESCRIPTION="${{ github.event.issue.body }}"
            SUMMARY="${{ github.event.issue.title }}"
          elif [ "${GITHUB_EVENT_NAME}" = "issue_comment" ]; then
            EVENT_TYPE="issue_comment"
            COMMENT="${{ github.event.comment.body }}"
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          else
            echo "Unsupported event type: $GITHUB_EVENT_NAME"
            exit 1
          fi
          # Sanitize variables to handle special characters
          DESCRIPTION=$(echo "$DESCRIPTION" | tr -d '\n' | tr -d '\r')
          SUMMARY=$(echo "$SUMMARY" | tr -d '\n' | tr -d '\r')
          COMMENT=$(echo "$COMMENT" | tr -d '\n' | tr -d '\r')

          echo "EVENT_TYPE=$EVENT_TYPE" >> $GITHUB_ENV
          echo "DESCRIPTION=$DESCRIPTION" >> $GITHUB_ENV
          echo "SUMMARY=$SUMMARY" >> $GITHUB_ENV
          echo "COMMENT=$COMMENT" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV

      - name: Debug Event Data
        run: |
          echo "Event Type: $EVENT_TYPE"
          echo "Description: $DESCRIPTION"
          echo "Summary: $SUMMARY"
          echo "Comment: $COMMENT"
          echo "Issue Number: $ISSUE_NUMBER"
          echo "Sanitized Description: $DESCRIPTION"
          echo "Sanitized Summary: $SUMMARY"
          echo "Sanitized Comment: $COMMENT"
          # fetch the jira details
          function jira_issue_data () {
            # Escape ISSUE_TITLE
          ESCAPED_TITLE=$(echo "$ISSUE_TITLE" | sed 's/"/\\"/g')
          echo "Escaped ISSUE_TITLE: $ESCAPED_TITLE"

          # Search Jira issue by title
          #RESPONSE=$(curl -s -v -u "$JIRA_USERNAME:$JIRA_API_TOKEN" --get --data-urlencode "jql=project=$JIRA_PROJECT_KEY AND summary~\"$ESCAPED_TITLE\"" $JIRA_URL/rest/api/3/search)
            RESPONSE=$(curl -v -u "$JIRA_USERNAME:$JIRA_API_TOKEN" --get --data-urlencode "jql=project=$JIRA_PROJECT_KEY AND summary~\"$ESCAPED_TILE\"" $JIRA_URL/rest/api/3/search)
          echo "Jira Search Response: $RESPONSE"

          # Extract Jira Issue Key
          JIRA_ISSUE_KEY=$(echo "$RESPONSE" | jq -r '.issues[] | .key')
            # Validate JIRA_ISSUE_KEY
          if [ -z "$JIRA_ISSUE_KEY" ] || [ "$JIRA_ISSUE_KEY" == "null" ]; then
            echo "Jira issue not found for GitHub issue title: $ISSUE_TITLE"
            exit 0
          fi

          echo "Found Jira Issue Key: $JIRA_ISSUE_KEY"
          echo "JIRA_ISSUE_KEY=$JIRA_ISSUE_KEY" >> $GITHUB_ENV
          }

      - name: Create Jira Ticket for GitHub Actions
        if: ${{ env.EVENT_TYPE == 'pull_request' || env.EVENT_TYPE == 'issues' }}
        env:
          JIRA_URL: ${{ vars.JIRA_URL }}
          JIRA_USERNAME: ${{ vars.JIRA_USERNAME }}
          JIRA_API_TOKEN: ${{ vars.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ vars.JIRA_PROJECT_KEY }}
          EVENT_TYPE: ${{ env.EVENT_TYPE }}
          SUMMARY: ${{ env.SUMMARY }}
          DESCRIPTION: ${{ env.DESCRIPTION }}
        run: |
          DESCRIPTION_ADF=$(echo "$DESCRIPTION" | jq -Rs '{
            type: "doc",
            version: 1,
            content: [
              {
                type: "paragraph",
                content: [
                  { type: "text", text: . }
                ]
              }
            ]
          }')
          # Debug: Output the JSON payload
          echo "Jira Payload:"
          echo '{
            "fields": {
              "project": { "key": "'"$JIRA_PROJECT_KEY"'" },
              "summary": "'"$SUMMARY"'",
              "description": '"$DESCRIPTION_ADF"',
              "issuetype": { "name": "Task" }
            }
          }' | jq .
          curl -X POST \
            -u "$JIRA_USERNAME:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "fields": {
                "project": { "key": "'"$JIRA_PROJECT_KEY"'" },
                "summary": "'"$SUMMARY"'",
                "description": '"$DESCRIPTION_ADF"',
                "issuetype": { "name": "Task" }
              }
            }' \
            "$JIRA_URL/rest/api/3/issue/"

      - name: Extract GitHub Issue Details
        id: extract_details
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          echo "ISSUE_TITLE=$ISSUE_TITLE" >> $GITHUB_ENV
          echo "COMMENT_BODY=$COMMENT_BODY" >> $GITHUB_ENV

      - name: Find Jira Issue by Title
        id: find_jira
        env:
          JIRA_URL: ${{ vars.JIRA_URL }}
          JIRA_USERNAME: ${{ vars.JIRA_USERNAME }}
          JIRA_API_TOKEN: ${{ vars.JIRA_API_TOKEN }}
          ISSUE_TITLE: ${{ env.ISSUE_TITLE }}
          JIRA_PROJECT_KEY: ${{ vars.JIRA_PROJECT_KEY }}
        run: |
          echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
          echo "COMMENT_BODY=${{ github.event.comment.body }}" >> $GITHUB_ENV
          # Debug Variables
          echo "Debugging Environment Variables:"
          echo "ISSUE_TITLE: $ISSUE_TITLE"
          echo "JIRA_URL: $JIRA_URL"
          echo "JIRA_USERNAME: $JIRA_USERNAME"
          echo "JIRA_API_TOKEN: $JIRA_API_TOKEN"
          echo "JIRA_PROJECT_KEY: $JIRA_PROJECT_KEY"
          jira_issue_data

      - name: Send mail
        if: always()
        uses: dawidd6/action-send-mail@v2
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_ACTION: ${{ github.event.action }}
          JIRA_PROJECT_KEY: ${{ vars.JIRA_PROJECT_KEY }}
          JIRA_USERNAME: ${{ vars.JIRA_USERNAME }}
          JIRA_URL: ${{ vars.JIRA_URL }}
          JIRA_ISSUE_KEY: ${{ env.JIRA_ISSUE_KEY }}
        with:
      # mail server settings
          server_address: smtp.gmail.com
          server_port: 465
    # user credentials
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
    # email subject
          subject: A new ${{ github.event_name }} is created for ${{ github.repository }} for job ${{ github.job }} and pipeline is ${{ job.status }}
    # email body as text
    #body: ${{ github.job }} job in worflow ${{ github.workflow }} for ${{ github.repository }} has created new jira
          body: |
           <html>
            <body>
               <h2>GitHub Event Notification</h2>
               <p><strong>Event Type:</strong> ${{ env.EVENT_TYPE }}</p>
               <p><strong>Action:</strong> ${{ github.event.action }}</p>
               <p><strong>Repository:</strong> ${{ github.repository }}</p>
               <p><strong>Summary:</strong> ${{ env.SUMMARY }}</p>
               <p><strong>Description:</strong> ${{ env.DESCRIPTION }}</p>
               <p><strong>Issue Number:</strong> ${{ env.ISSUE_NUMBER }}</p>
               <p>
                <strong>JIRA Issue Link:</strong>
                <a href="${{ vars.JIRA_URL }}/browse/${{ vars.JIRA_PROJECT_KEY }}-${{ env.JIRA_ISSUE_KEY }}">
                   JIRA-${{ vars.JIRA_PROJECT_KEY }}-<TICKET_ID>
                </a>
               </p>
            </body>
           </html>
    # comma-separated string, send email to
          to: ${{ secrets.EMAIL_TO }}
    # from email name
          from: ${{ secrets.EMAIL_USERNAME }}
          content_type: text/html 

